# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Turn on extended globbing
shopt -s extglob
# set -o vi
#source $HOME/.cargo/env

DOT_DIR="/home/$USER/dotfiles"
export DOT_DIR

# Source local files
for file in $DOT_DIR/local/bash/*.sh; do
  . $file
done

# Let other users to run graphical applications under
# this user's session
xhost + > /dev/null 2>&1

# Paths
export PATH=~/.local/bin:$PATH
export PATH=$PATH:/usr/local/bin


# Color definitions
BGREEN=$'\[\033[1;32m\]'
GREEN=$'\[\033[0;32m\]'
BRED=$'\[\033[1;31m\]'
RED=$'\[\033[0;31m\]'
BBLUE=$'\[\033[1;34m\]'
BLUE=$'\[\033[0;34m\]'
NORMAL=$'\[\033[0m\]'

# Colored man pages

# Even more colors!
# alias ls="lsd"
alias ls='ls --color=auto --block-size=M'
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'
alias grep='grep --color=auto'
alias rgrep='rgrep --color=auto'
alias fgrep='fgrep --color=auto'
alias egrep='egrep --color=auto'

# Bash completion
[[ -r /usr/share/bash-completion/bash_completion ]] && . /usr/share/bash-completion/bash_completion

# Git related things
GIT_PS1_SHOWDIRTYSTATE="true"
GIT_PS1_SHOWUPSTREAM="verbose"
. $DOT_DIR/bash/git-completion.bash
. $DOT_DIR/bash/git-prompt.sh

# Prompt
if [[ $(id -u) -ne 0 ]] ; then
	PROMPT_SIGN="$"
else
	PROMPT_SIGN="#"
fi

PROMPT_GIT='$(__git_ps1 " %s")'
PS1="[${BGREEN}\u@\h ${BBLUE}\W${NORMAL}${BRED}${PROMPT_GIT}${NORMAL}]${PROMPT_SIGN} "

# Include user specific stuff
[[ -r $DIR/bash/bashrc_user ]] && . $DIR/bash/bashrc_user

# HISTSIZE
export HISTSIZE=2000
export HISTFILESIZE=2000

# Unset temporary variables
unset PROMPT_SIGN
unset PROMPT_GIT
unset DIR

# set true colors for neovim
export NVIM_TUI_ENABLE_TRUE_COLOR=1

# set default editor as vim
VISUAL=nvim;
export VISUAL
EDITOR=nvim;
export EDITOR
TERMINAl=gnome-terminal;
export TERMINAL

# personal aliases
alias ttr='ranger ~/Lectures'

alias s='. ../dev.sh'

export VIM_CMD='nvim'
# use nvim
if hash nvim 2>/dev/null; then
	alias vim=$VIM_CMD
	alias vi=$VIM_CMD
else
	alias vi='vim -u /dev/null'
fi

if type rg &> /dev/null; then
    export FZF_DEFAULT_COMMAND='rg --files'
fi


# markdown to html5
alias panmd='pandoc -t html5 -f markdown+smart --toc --toc-depth 3 --template GitHub.html5 --quiet'

#----------------------------------------------------------------------
# Push yourself to learn
#----------------------------------------------------------------------
# alias clear="echo 'Use <C-L> instead.'"
#alias exit="echo 'Use <C-D> instead.'" #fucking stupid
export LFS=/mnt/lfs

# Solve the emacs X problem on Elementary

# Take quick notes
alias note='nvim ~/.notes/stuff'
alias idea="$HOME/Programs/idea/bin/idea.sh"
alias studio="$HOME/Programs/android-studio/bin/studio.sh"

############### Functions 

function mv2down {
  mv ~/Ä°ndirilenler/* ~/Downloads/
}

function fancy() {
  while true
  do
    figlet "$1" | lolcat
    sleep 1
  done
}

function startos {
  # Start the os with ssh to 10022
  qemu-system-x86_64 \
  --enable-kvm \
  -m 2G \
  -hda "$1" \
  -net user,hostfwd=tcp::10022-:22 -net nic \
  "$2"
}

function youtube-pl {
  youtube-dl -o "%(playlist_index)s-%(title)s.%(ext)s" "$1"
}
mnx='qemu-system-x86_64 -localtime -net user -net nic -m 256 -cdrom minix.iso -hda minix.img -boot d'


function usage() {
  if "$1" --help > /dev/null 2>&1; then
    "$1" --help | grep -- "$2"
  elif "$1" -h > /dev/null 2>&1; then
    "$1" -h | grep -- "$2"
  else
    echo "Not compatible."
  fi
}

pid_sigparse () {
    i=0
    # bits="$(printf "16i 2o %X p" "0x$1" | dc)" # variant for busybox
    bits="$(printf "ibase=16; obase=2; %X\n" "0x$1" | bc)"
    while [ -n "$bits" ] ; do
        i="$(expr "$i" + 1)"
        case "$bits" in
            *1) printf " %s(%s)" "$(kill -l "$i")" "$i" ;;
        esac
        bits="${bits%?}"
    done
}


sigparse() {
  grep "^Sig...:" "/proc/$1/status" | while read a b ; do
        printf "%s%s\n" "$a" "$(pid_sigparse "$b")"
    done | fmt -t 
}

dev() {
  dir=$HOME/dev/$1
  if [ -d $dir ]; then
    cd $dir
    if [ -e dev.sh ]; then
      source dev.sh    
    else
      printf "No dev script\n"
      return
    fi
  else
    printf "No dev dir\n"
    return
  fi
}

revmd() {
  panmd $1 -o /tmp/pandoc-md.html
  firefox /tmp/pandoc-md.html
}

# ascii helpers
chr() {
  [ "$1" -lt 256 ] || return 1
  printf "\\$(printf '%03o' "$1")"
}

ord() {
  LC_CTYPE=C printf '%d' "'$1"
}
#. "$HOME/.cargo/env"

[ -f ~/.fzf.bash ] && source ~/.fzf.bash
