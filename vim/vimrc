" Little required stuff -------------------- {{{
set encoding=UTF-8 		    " set the encoding
set nocompatible		   	" be Improved, required
filetype off			    " required
filetype plugin on
" python3 imp module issue
silent! py3 pass
" }}}

" Plugs -------------------- {{{
"rtp means (r)un (t)ime (p)ath
set rtp+=~/.vim/bundle/Vundle.vim
call plug#begin('~/.vim/plugged')

" Fancy startup
Plug 'mhinz/vim-startify'

" Addons
Plug 'scrooloose/nerdtree'
Plug 'yuttie/comfortable-motion.vim' " Smooth scrolling
Plug 'tpope/vim-surround' " Surroundings

" Themes
Plug 'altercation/vim-colors-solarized'
Plug 'icymind/NeoSolarized'
Plug 'morhetz/gruvbox' "The best...
Plug 'sainnhe/gruvbox-material' "The best with material touch...
Plug 'vim-python/python-syntax'
Plug 'junegunn/seoul256.vim'
Plug 'arcticicestudio/nord-vim'
Plug 'romainl/flattened'
Plug 'BarretRen/vim-colorscheme'
Plug 'Rigellute/rigel'
Plug 'danishprakash/vim-yami'

" Jedi-vim (not that useful actually)
"Plug 'davidhalter/jedi-vim'

" Searching (<C-P>)
Plug 'ctrlpvim/ctrlp.vim'

" Follow the standars boy !
Plug 'editorconfig/editorconfig-vim'

" Airline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Git Integration
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Commenting lines
Plug 'vim-scripts/tComment'

" Arduino syntax
Plug 'sudar/vim-arduino-syntax'

" Improved highlighting for python
Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}

" Note plugin
Plug 'xolox/vim-notes'
Plug 'xolox/vim-misc'

" Show code errors
Plug 'vim-syntastic/syntastic'

" Multiple cursors
Plug 'terryma/vim-multiple-cursors'

" Auto-closing
Plug 'cohama/lexima.vim'

" HTML
Plug 'mattn/emmet-vim'

" Documentation
Plug 'vim-utils/vim-man'
Plug 'gauteh/vim-cppman' " cpp
Plug 'vim-scripts/pydoc.vim'

" LaTeX Plug (exciting stuff)
Plug 'lervag/vimtex'

" Markdown style stuff
Plug 'shime/vim-livedown'

" Trailing Whitespaces
Plug 'ntpeters/vim-better-whitespace'

" Distraction-free writing
Plug 'junegunn/goyo.vim'

" Project Nova (colorscheme)
Plug 'sheerun/vim-polyglot'
Plug 'trevordmiller/nova-vim'

" Base2Tone color scheme
Plug 'atelierbram/Base2Tone-vim'

" Badwolf color scheme (finally I'm installing this)
Plug 'sjl/badwolf'

" Another nice color scheme
Plug 'mhartington/oceanic-next'

" Indent guides, pretty neat -\_(^_^)_/-
Plug 'thaerkh/vim-indentguides'

" Syntax
Plug 'MTDL9/vim-log-highlighting'

" Vim Sugar
Plug 'tpope/vim-eunuch'

" Vim Clap
Plug 'liuchengxu/vim-clap'

" Yet another theme
Plug 'arzg/vim-colors-xcode'

" Tables, yaaay
Plug 'dhruvasagar/vim-table-mode'

" Power of VSCode... I guess
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Test Plug
"Plug 'file:///home/monepicor/Projects/VimScript/color-changer'

" Vim-devicons (Always should come last)
Plug 'ryanoasis/vim-devicons'
call plug#end()
filetype plugin indent on 	" required
" }}}

" Mappings -------------------- {{{
" Leader Mappings
map <Space> <leader>
" map <leader>w   :w<CR>
map <leader>q   :q<CR>
map <leader>!   :qa<CR>
map <leader>gs  :Gstatus<CR>
map <leader>= 	 <C-W>=

" Clap mapping, Pretti neat
map <leader>wb 	:Clap buffers<CR>
map <leader>wl 	:Clap blines<CR>
map <leader>wc 	:Clap colors<CR>

" NERDTree Mappings
map <leader>nt   :NERDTreeToggle<CR>
map <leader>nf   :NERDTreeFocus<CR>
map <leader>nc   :NERDTreeCWD<CR>

" Edit .vimrc quickly in a split
map <leader>ev   :sp ~/.vimrc<CR>
" Source .vimrc
map <leader>sv   :source ~/.vimrc<CR>

" Clear Search Highlight
map <leader>csh  :nohlsearch<CR>
" Redraw the screen
map <leader>rd	 :redraw!<CR>

" Exit neovim terminal easily
tnoremap <Esc> <C-\><C-n>

" Easier split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Easy tab navigations
nnoremap <C-y>   :tabprevious<CR>
nnoremap <C-o>   :tabnext<CR>
" }}}

" Abbreviations -------------------- {{{
iabbrev asim not awesome
iabbrev environmnent environment
" }}}

" Settings [let and set] -------------------- {{{
let g:auto_save = 1 				" Enable auto save on Vim startup
let g:auto_save_in_insert_mode = 0	" Do not save in insert mode

" Reduce gitgutter updatetime
set updatetime=100

" Airline tab thing
let g:airline#extensions#tabline#enabled = 0

" Real colors
set termguicolors

syntax on

set autoread								" Auto reload changed files
set nowrap 									" Don't wrap the long lines
set expandtab shiftwidth=2 tabstop=2 				 	" Two spaces for tabs
set noswapfile								" Turn off swap files
set hlsearch								" Highlight the search results
set showcmd									" Show commands on status bar
set hidden									" Let buffers to be hidden without saving
set wildmode=longest:full
set ignorecase              " Ignore case when command completion
set wildignorecase

" Some servers on coc.nvim might fail otherwise
set nobackup
set nowritebackup

set cmdheight=2

" required for coc.nvim
set shortmess+=c

set signcolumn=yes

let g:tex_flavor = 'latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=0    " doesn't work properly at the time
let g:tex_conceal='abdmg'

" Python interpreters
let g:python_host_prog  = '/usr/bin/python2'	  " Python 2
let g:python3_host_prog = '/usr/bin/python3'  " Python 3
" to disable
"let g:loaded_python_provider = 1
"let g:loaded_python3_provider = 1


" Latex neovim support
let g:vimtex_compiler_progname = 'nvr'

" }}}

" Persistent undo -------------------- {{{
set undodir=~/.vim/undo
set undofile
set undolevels=1000
set undoreload=10000
" }}}

" Interface -------------------- {{{
set number relativenumber 				" Enable line numbers
set scrolloff=10						" Leave 10 lines of buffer when scrolling
set sidescrolloff=10					" Leave 10 characters of horizontal buffer when scrolling
" }}}

" Look & Feel ;) -------------------- {{{
set background=dark
" gruvbox updated, and it's sick
colorscheme gruvbox-material
" set termguicolors

" Airline theme
let g:airline_theme='Base2Tone_CaveDark'

"set guifont=DroidSansMono\ Nerd\ Font\ 11

" Showcase comments in italics
highlight Comment cterm=italic gui=italic

" Make the python code look pretty
let python_highlight_all=1

" }}}

" Vimscript file settings -------------------- {{{
augroup filetype_vim
	autocmd!
	autocmd FileType vim setlocal foldmethod=marker
	autocmd FileType asm set filetype=nasm
  autocmd BufRead,BufNewFile talimat setfiletype dosini
  autocmd BufRead,BufNewFile *.log setfiletype log
augroup END
" }}}

" Push yourself to learn -------------------- {{{
" Disable h,l and use w,e,b,g_,0,$,^ instead
" nnoremap h <nop>
" nnoremap l <nop>
" }}}

" Syntastic Settings -------------------- {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_python_pyflakes_exe = 'python3 -m pyflakes'
" }}}

" Little Ideas -------------------- {{{
" Dictionary Plug
" }}}

" Testing -------------------- {{{
"let g:jedi#auto_vim_configuration=0
"let g:jedi#popup_on_dot=1
"let g:jedi#popup_select_first=0
let g:gitgutter_enabled = 1
fun! ProfileStart(...)
	if a:0 && a:1 != 1
		let g:profile_file = a:1
	else
		let g:profile_file = '/tmp/vim'.getpid().'.'.reltimestr(reltime())[-4:].'profile.txt'
		if a:0 < 2 || a:2
			@* = g:profile_file
		endif
	endif
	echom "Profiling into" g:profile_file
	exec 'profile start '.g:profile_file
	profile! file **
	profile  func *
endfun
if len(get(g:, 'profile', ''))
	call ProfileStart(g:profile)
endif
if 0
	call ProfileStart(1, 0)
endif
" }}}

" coc.nvim -------------------- {{{
" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)
xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <leader>ca  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <leader>ce  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <leader>cc  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <leader>co  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <leader>cs  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <leader>cj  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <leader>ck  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <leader>cp  :<C-u>CocListResume<CR>

" Sweet sweet extensions
let g:coc_global_extensions = [
  \ 'coc-python',
  \ 'coc-java',
  \ 'coc-xml',
  \ 'coc-markdownlint',
  \ 'coc-texlab',
  \ 'coc-json',
  \ ]
" }}}

" Airline -------------------- {{{

" Define the dictionary
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" powerline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.maxlinenr = ''
let g:airline_symbols.dirty='⚡'



" }}}

" NERDTree -------------------- {{{

" after a re-source, fix syntax matching issues (damn brackets)
if exists('g:loaded_webdevicons')
  call webdevicons#refresh()
endif

" }}}

" Example Group -------------------- {{{
" You know what, use built-in command to
" \ make groups you dummy!
" }}}

